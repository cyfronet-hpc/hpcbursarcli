#!/usr/bin/env python3.9

'''
hpc-grants - Show available grant with details.

Usage:
    hpc-grants
    hpc-grants -h | --help
    hpc-grants -v | --version

Options:
    -h --help   Show help.
    -v --version   Show version.
'''

import os
import sys

lib_dir = 'HPC_BURSAR_LIBDIR'
if lib_dir in os.environ.keys():
    sys.path.append(os.environ[lib_dir])

import requests
import pymunge

from docopt import docopt

VERSION = '0.1'
BURSAR_URL = os.getenv('HPC_BURSAR_URL', 'http://127.0.0.1:8000/api/v1/')
SERVICE = 'user/user_grants_info'
URL = BURSAR_URL + SERVICE


def generate_token(user, service):
    user_service = user + ':' + service
    bytes_user_service = str.encode(user_service)
    with pymunge.MungeContext() as ctx:
        user_service = ctx.encode(bytes_user_service)
    return user_service


def get_data():
    user = os.getlogin()
    header = {
        'x-auth-hpcbursar': generate_token(user, SERVICE)
    }
    response = requests.get(URL + '/' + user, headers=header)
    if response.status_code == 403:
        raise Exception('You are unauthorized to perform this request!')
    elif response.status_code != 200:
        raise Exception('Invalid response from server!')

    try:
        data = response.json()
        return data
    except Exception as e:
        raise Exception('Unable to parse server\'s response!')


def print_grant_info(data):
    name, start, end, state, allocations, group, group_members = data
    print(f"""Grant name    | {data[name]}
-----------------------------------------------------------------------------
Start date    | {data[start]}
End date      | {data[end]}
-----------------------------------------------------------------------------
State         | {data[state]}
-----------------------------------------------------------------------------
Allocations   |    CPU      | timelimit {data[allocations][0].split()[-3]} hours {data[allocations][0].split()[-1].replace("}", "")}
              |    GPU      | timelimit {data[allocations][1].split()[-3]} hours {data[allocations][1].split()[-1].replace("}", "")}
              |   Storage   | capacity {data[allocations][2].split()[-1].replace("}", "")}
-----------------------------------------------------------------------------
Group name    | {data[group]}
Group members | {''.join((f'{member} ' for member in data[group_members]))}
""")


def main():
    args = docopt(__doc__)
    if args['--version']:
        print(f'hpc-grants version: {VERSION}')
        sys.exit(0)

    data = get_data()
    for grant in data:
        print_grant_info(grant)


if __name__ == '__main__':
    main()
