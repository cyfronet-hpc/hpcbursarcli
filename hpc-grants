#!/usr/bin/env python3.9

'''
hpc-grants - Show available grant with details.

Usage:
    hpc-grants
    hpc-grants -h | --help
    hpc-grants -v | --version

Options:
    -h --help   Show help.
    -v --version   Show version.
'''

import os
import sys

env_lib_dir = 'HPC_BURSAR_LIBDIR'
if env_lib_dir in os.environ.keys():
    sys.path.append(os.environ[env_lib_dir])

import requests
import pymunge
import json
from collections import OrderedDict

from docopt import docopt

VERSION = '0.1'
BURSAR_URL = os.getenv('HPC_BURSAR_URL', 'http://127.0.0.1:8000/api/v1/')
BURSAR_CERT_PATH = os.getenv('HPC_BURSAR_CERT_PATH', '')
USER = os.getenv('USER', os.getlogin())
SERVICE = 'user/user_grants_info'
URL = BURSAR_URL + SERVICE


def generate_token(user, service):
    user_service = user + ':' + service
    bytes_user_service = str.encode(user_service)
    with pymunge.MungeContext() as ctx:
        user_service = ctx.encode(bytes_user_service)
    return user_service


def get_data():
    user = USER
    header = {
        'x-auth-hpcbursar': generate_token(user, SERVICE)
    }
    response = requests.get(URL + '/' + user, headers=header, verify=BURSAR_CERT_PATH)
    if response.status_code == 403:
        raise Exception('You are unauthorized to perform this request!')
    elif response.status_code != 200:
        raise Exception('Invalid response from server!')

    try:
        data = response.json()
        return data
    except Exception as e:
        raise Exception('Unable to parse server\'s response!')


def order_allocations(allocs):
    return sorted(allocs, key=lambda x: x['resource'])


def format_number(value):
    return f'{value:,}'.replace(',', ' ')


def process_parameter_value(name, value):
    type_suffix = {
        'timelimit': 'h',
        'hours': 'h',
        'capacity': 'GB'
    }
    return f'{format_number(value)} {type_suffix[name]}'


def process_parameters(params):
    params = params.copy()
    order = ['hours', 'timelimit', 'capacity']
    ordered_params = OrderedDict()
    for type in order:
        if type in params.keys():
            ordered_params[type] = process_parameter_value(type, params[type])
            del params[type]
    if params:
        ordered_params.update(params)
    return ordered_params


def print_grant_info(data):
    # print(json.dumps(data))
    print(f"Grant: {data['name']}")
    print(f" start: {data['start']}")
    print(f" end: {data['end']}")
    print(f" state: {data['state']}")
    allocations = order_allocations(data['allocations'])
    if allocations:
        for al in allocations:
            print(f" Allocation: {al['name']}, resource: {al['resource']}")
            parameters = process_parameters(al['parameters'])
            for key, value in parameters.items():
                print(f'  {key}: {value}')
            # print(f"  {', '.join(f'{key}: {value}' for (key, value) in parameters.items())}")
    else:
        print(' - No allocations')
    print(f" Group: {data['group']}")
    print(f"  members: {', '.join(sorted(data['group_members']))}")


def main():
    args = docopt(__doc__)
    if args['--version']:
        print(f'hpc-grants version: {VERSION}')
        sys.exit(0)

    data = get_data()
    for i in range(len(data)):
        grant = data[i]
        print_grant_info(grant)
        if i != len(data) - 1:
            print('---')


if __name__ == '__main__':
    main()
