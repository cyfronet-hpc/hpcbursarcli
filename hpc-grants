#!/usr/bin/env python3.9

"""
hpc-grants - Show available grant with details.

Usage:
    hpc-grants
    hpc-grants -h | --help
    hpc-grants -v | --version

Options:
    -h --help   Show help.
    -v --version   Show version.
"""

from helper_functions import *
import os
import sys
from collections import OrderedDict
from docopt import docopt

env_lib_dir = 'HPC_BURSAR_LIBDIR'
if env_lib_dir in os.environ.keys():
    sys.path.append(os.environ[env_lib_dir])

VERSION = '0.1'


def order_allocations(allocs):
    return sorted(allocs, key=lambda x: x['resource'])


def format_number(value):
    return f'{value:,}'.replace(',', ' ')


def process_parameter_value(name, value):
    type_suffix = {
        'timelimit': 'h',
        'hours': 'h',
        'capacity': 'GB'
    }
    return f'{format_number(value)} {type_suffix[name]}'


def process_parameters(params):
    params = params.copy()
    order = ['hours', 'timelimit', 'capacity']
    ordered_params = OrderedDict()
    for type in order:
        if type in params.keys():
            ordered_params[type] = process_parameter_value(type, params[type])
            del params[type]
    if params:
        ordered_params.update(params)
    return ordered_params


def print_grant_info(data):
    print(f"Grant: {data['name']}")
    print(f" start: {data['start']}")
    print(f" end: {data['end']}")
    print(f" state: {data['state']}")
    allocations = order_allocations(data['allocations'])
    if allocations:
        for al in allocations:
            print(f" Allocation: {al['name']}, resource: {al['resource']}")
            parameters = process_parameters(al['parameters'])
            for key, value in parameters.items():
                print(f'    {key}: {value}')
    else:
        print('  - No allocations')
    print(f" Group: {data['group']}")
    print(f"    members: {', '.join(sorted(data['group_members']))}")


def main():
    args = docopt(__doc__)
    if args['--version']:
        print(f'hpc-grants version: {VERSION}')
        sys.exit(0)

    data = sorted(get_data(), key=lambda x: x['start'], reverse=True)
    for i in range(len(data)):
        grant = data[i]
        print_grant_info(grant)
        if i != len(data) - 1:
            print('---')


if __name__ == '__main__':
    main()
